This is Multi-label Malware Classification for King's College London final dissertation.

This program is built on python2 and Linux OS.
------------------------------------------------------------------------------------------

There are two folders. One is "advertising", another one is "advertising_answer". 

The files in "advertising" folder are demo file for building ensembled model.

----------------------Below are ensembled random forest model -----------------------------------

a. Built many models with "different ML parameter setting" and 'different label combinations by using "Multi-label-Android-Malware-Classification".
   Then, using "1_good_setting_tet-val.py" to find the model with best setting in validation result and selected the corresponding setting from testing result.
   This process is like "training-validation-testing" in Machine Learning
  
   Demo run [python 1_good_setting_tet-val.py ./advertising/val/ ./advertising/test/]
   
   This program will chose the best setting model from validation result, and selected same setting models from testing result.
   Then, it would create a folder "bset_combinations_test" under the 'advertising' folder where put all best setting models
   

b. Using "2_group_label_.py" to group models that were selected in step.a into different folder.
   
   That is to say, in step a, we would find many best setting models with different label combinations.
   Thus, by using "2.group single label model" to group them into folder where inside models all have common label.
   In other word, ensembled many models that have common label result output. 

   Demo run [python 2_group_label_.py ./advertising/test/best_combinations_test/] 
   Then, it would create a folder "all_combination" where there are many sub-folders are categorized by single-label.
   The models inside this single-label folder are related to this single-label. (stacking method)

   For example, 'label-8 folder' includes "label-8", "label-8-12", "label-8-15" and "label-8-12-15" models. 
   They all have common label. (label-8)


c. Using "3_read_log.py" to read all log files that under single-label folders and have common label outputs.
   Then, the program "3_read_log.py" would find the mislabeled samples via all log files and summarize these mislabeled samples into 'mis-labelled log' files for each model.
   Furthermore, by using all 'mis-labelled log' files to find what samples have been mislabelled by all models to form two txt files and two csv files, which stands for mis-labelled results of an ensembled model.
   
   Demo run [python 3_read_log.py ./advertising/test/best_combinations_test/all_combinations/label-8/ ]
   
   Before demo running, please revise 'command' variable in program '3_read_log.py'.
   For label-8, we should use 'C&C' to detect 'C&C' mislabeled samples because behavior label-8 is C&C (if it's for label-12, then revised command variabel to 'InfoStealing')
   Thus, this program will search all log files and find any samples were mislabeled in label-8 ('C&C').
   
   Finally, it would create a summary folder that includes sub-folder "label-8" and it also create label-8_FN_.csv, label-8_FP_.csv, label-8_FN_.txt and label-8_FP_.txt.
   The two csv files stand for false negative samples and false positive samples from the ensembled model for label-8, respectively. 
   The two txt files mean the number of mislabeled false negative samples and false positive samples from the ensembled models for label-8, respectively.

d. Using "4_analysis_FPnFT.py" to fetch txt files from 'step c' and get the json file from single-label model (label-8). 
   
   Then, it would calculate the final performance of the ensembled model.

   Demo run [python 4_analysis_FPnFT.py ./advertising/test/best_combinations_test/all_combinations/label-8/label-8/ ./advertising/test/best_combinations_test/all_combinations/summary/label-8/ ]
   
   Then, this program will fetch csv files and json files that all come from (argv [1]) label-8 model to get original accuracy, precision and recall. 
   Similarly, it would fetch label-8_FN.txt and label-8_FP.txt from (argv [2]) to get FP and FN of the ensembled model for label-8.

   Finally, it would calculate the final results of the ensembled model for label-8. and output the summary file.

e. By repeatably doing above steps from a to d for label-12 and label-15, we can get all FN.cvs files and FP.csv files for all label combinations.
     Also, we can know the performance of the ensembled model in term of label-8, label-12 and label-15.
     Then, using "5_read_common_sample.py" to read all FN and FP csv files to calculate final accuracy of the ensembled model

     Demo run [python 5_read_common_sample.py ./advertising/test/best_combinations_test/all_combinations/summary/ ]
     Then, the program will merge all label-x FP .csv files and label-x FN .csv files into a F.cvs which stands for a mislabeled sample list of the ensembled model.
     Thus, we can calculate the final accuracy.


Thus, the whole process of ensembled model is below,

1. To build many multi-label models for every label combinations with different ML parameter setting.
2. By step a, find the best setting in testing dataset by analyzing validation dataset.
3. By step b, group relevant models into a single-label folder (e.q. label-8 folder includes label-8, label-8-12, label-8-15, label-8-12-15, etc.)
4. By step c, get all log files from single-label folder (e.g. label-8).
      Then, it would output the label-8_FN.csv and label-8_FP.csv for label-8. 
      In fact, these two csv file is final FP and FN of the ensembled model for label-8, because they are common mislabeled samples on label-8 between those label-8 related models
5. By step d, get original accuracy, precision and recall from the label-8 model.
      Then, using those data with FN and FP to compute final accuracy, precision and recall of the ensembled for label-8.

6. Repeatably doing step 1 to 5 for label-8, label-12 and label-15 to get label-8_FN.csv, label-8_FP.csv, label-12_FN.csv, label-12_FP.csv,label-15_FN.csv and label-15_FP.csv
    Then, using '5_read_common_sample.py' to merge all label-x_FN.csv files and label-x_FP.csv files into a file (F_.csv ) that stands for mislabeled samples from the ensembled model.
   


    

Done

---------------ensembled is done-------------
